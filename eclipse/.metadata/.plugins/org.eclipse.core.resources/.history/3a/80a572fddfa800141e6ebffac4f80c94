package co.zerono.pc.blocks;

import java.util.List;
import java.util.Random;

import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraftforge.common.util.ForgeDirection;
import co.zerono.pc.reference.Names;
import co.zerono.pc.reference.Settings;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockDenseOre extends BlockPC
{
	@SideOnly(Side.CLIENT)
	private IIcon[] blockTop, blockSide;
	
	public BlockDenseOre()
	{
		super();
		this.setBlockName(Names.Blocks.POOR_ORE_BLOCK);
		this.setStepSound(soundTypeStone);
		this.setHarvestLevel("pickaxe", 1);
		this.setHardness(2.0F);
		this.setResistance(2.0F);
	}
	
	@Override
	public Item getItemDropped(int meta, Random rand, int fortune)
	{
		return Item.getItemFromBlock(this);
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void getSubBlocks(Item item, CreativeTabs creativeTabs, List list)
	{
		for (int meta = 0; meta < Names.Blocks.ORE_POOR.length; meta++)
		{
			if (meta == 0)
			{
				if (Settings.Ore.Gen.GEN_ALUMINIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 1)
			{
				if (Settings.Ore.Gen.GEN_BERYLLIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 2)
			{
				if (Settings.Ore.Gen.GEN_CHROMIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 3)
			{
				if (Settings.Ore.Gen.GEN_COAL)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 4)
			{
				if (Settings.Ore.Gen.GEN_COBALT)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 5)
			{
				if (Settings.Ore.Gen.GEN_COPPER)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 6)
			{
				if (Settings.Ore.Gen.GEN_GOLD)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 7)
			{
				if (Settings.Ore.Gen.GEN_IRIDIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 8)
			{
				if (Settings.Ore.Gen.GEN_IRON)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 9)
			{
				if (Settings.Ore.Gen.GEN_LAPIS)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 10)
			{
				if (Settings.Ore.Gen.GEN_LEAD)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 11)
			{
				if (Settings.Ore.Gen.GEN_LITHIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 12)
			{
				if (Settings.Ore.Gen.GEN_MAGNESIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 13)
			{
				if (Settings.Ore.Gen.GEN_NEPTUNIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 14)
			{
				if (Settings.Ore.Gen.GEN_NICKEL)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 15)
			{
				if (Settings.Ore.Gen.GEN_PALLADIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 16)
			{
				if (Settings.Ore.Gen.GEN_PHOSPHORUS)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 17)
			{
				if (Settings.Ore.Gen.GEN_PLATINUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 18)
			{
				if (Settings.Ore.Gen.GEN_PLUTONIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 19)
			{
				if (Settings.Ore.Gen.GEN_SILICON)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 20)
			{
				if (Settings.Ore.Gen.GEN_SILVER)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 21)
			{
				if (Settings.Ore.Gen.GEN_SODIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 22)
			{
				if (Settings.Ore.Gen.GEN_SULFUR)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 23)
			{
				if (Settings.Ore.Gen.GEN_TIN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 24)
			{
				if (Settings.Ore.Gen.GEN_TITANIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 25)
			{
				if (Settings.Ore.Gen.GEN_TUNGSTEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 26)
			{
				if (Settings.Ore.Gen.GEN_URANIUM)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta == 27)
			{
				if (Settings.Ore.Gen.GEN_ZINC)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
		}
	}
	
	@Override
	public int damageDropped (int meta)
	{
		return meta;
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister iconRegister)
	{
		this.blockTop = new IIcon[Names.Blocks.ORE_POOR.length];
		this.blockSide = new IIcon[Names.Blocks.ORE_POOR.length];
		for (int i=0; i < Names.Blocks.ORE_POOR.length; i++)
		{
			blockTop[i] = iconRegister.registerIcon(String.format("%s.%s_top", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR[i]));
			blockSide[i] = iconRegister.registerIcon(String.format("%s.%s_side", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR[i]));
		}
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int side, int meta)
	{
		meta = MathHelper.clamp_int(meta, 0, Names.Blocks.ORE_POOR.length - 1);		
		if (ForgeDirection.getOrientation(side) == ForgeDirection.UP || ForgeDirection.getOrientation(side) == ForgeDirection.DOWN)
		{
			return blockTop[meta];
		}
		else
		{
			return blockSide[meta];
		}
	}
}
