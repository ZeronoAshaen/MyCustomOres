package co.zerono.pc.blocks;

import java.util.List;
import java.util.Random;

import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraftforge.common.util.ForgeDirection;

import co.zerono.pc.reference.Names;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockPoorOre extends BlockPC
{
	@SideOnly(Side.CLIENT)
	private IIcon[] blockTop, blockSide;
	
	public BlockPoorOre()
	{
		super();
		this.setBlockName(Names.Blocks.POOR_ORE_BLOCK);
		this.setStepSound(soundTypeStone);
		this.setHarvestLevel("pickaxe", 1);
		this.setHardness(2.0F);
		this.setResistance(2.0F);
	}
	
	@Override
	public Item getItemDropped(int meta, Random rand, int fortune)
	{
		return Item.getItemFromBlock(this);
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void getSubBlocks(Item item, CreativeTabs creativeTabs, List list)
	{
		for (int meta = 0; meta < Names.Blocks.ORE_POOR_STONE.length; meta++)
		{
			list.add(new ItemStack(item, 1, meta));
		}
	}
	
	@Override
	public int damageDropped (int meta)
	{
		return meta;
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister iconRegister)
	{
		this.blockTop = new IIcon[Names.Blocks.ORE_POOR_STONE.length];
		this.blockSide = new IIcon[Names.Blocks.ORE_POOR_STONE.length];
		for (int i=0; i < Names.Blocks.ORE_POOR_STONE.length; i++)
		{
			blockTop[i] = iconRegister.registerIcon(String.format("%s.%s_top", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR_STONE[i]));
			blockSide[i] = iconRegister.registerIcon(String.format("%s.%s_side", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR_STONE[i]));
		}
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int side, int meta)
	{
		meta = MathHelper.clamp_int(meta, 0, Names.Blocks.ORE_POOR_STONE.length - 1);
		
		if (ForgeDirection.getOrientation(side) == ForgeDirection.UP || ForgeDirection.getOrientation(side) == ForgeDirection.DOWN)
		{
			return blockTop[meta];
		}
		else
		{
			return blockSide[meta];
		}
	}
}
