package co.zerono.pc.blocks;

import java.util.List;
import java.util.Random;

import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraftforge.common.util.ForgeDirection;
import co.zerono.pc.reference.Names;
import co.zerono.pc.reference.Settings;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockPoorOre extends BlockPC
{
	@SideOnly(Side.CLIENT)
	private IIcon[] blockTop, blockSide;
	
	public BlockPoorOre()
	{
		super();
		this.setBlockName(Names.Blocks.POOR_ORE_BLOCK);
		this.setStepSound(soundTypeStone);
		this.setHarvestLevel("pickaxe", 1);
		this.setHardness(2.0F);
		this.setResistance(2.0F);
	}
	
	@Override
	public Item getItemDropped(int meta, Random rand, int fortune)
	{
		return Item.getItemFromBlock(this);
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void getSubBlocks(Item item, CreativeTabs creativeTabs, List list)
	{
		for (int meta = 0; meta < Names.Blocks.ORE_POOR_STONE.length; meta++)
		{
			if (meta = 0)
			{
				if (Settings.Ore.LITHIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 1)
			{
				if (Settings.Ore.SODIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 2)
			{
				if (Settings.Ore.BERYLLIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 3)
			{
				if (Settings.Ore.MAGNESIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 4)
			{
				if (Settings.Ore.URANIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 5)
			{
				if (Settings.Ore.NEPTUNIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 6)
			{
				if (Settings.Ore.PLUTONIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 7)
			{
				if (Settings.Ore.TITANIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 8)
			{
				if (Settings.Ore.CHROMIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 9)
			{
				if (Settings.Ore.IRON_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 10)
			{
				if (Settings.Ore.COBALT_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 11)
			{
				if (Settings.Ore.NICKEL_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 12)
			{
				if (Settings.Ore.COPPER_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 13)
			{
				if (Settings.Ore.PALLADIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 14)
			{
				if (Settings.Ore.SILVER_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 15)
			{
				if (Settings.Ore.TUNGSTEN_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 16)
			{
				if (Settings.Ore.IRIDIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 17)
			{
				if (Settings.Ore.PLATINUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 18)
			{
				if (Settings.Ore.GOLD_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 19)
			{
				if (Settings.Ore.ALUMINIUM_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 20)
			{
				if (Settings.Ore.ZINC_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 21)
			{
				if (Settings.Ore.TIN_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 22)
			{
				if (Settings.Ore.LEAD_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 23)
			{
				if (Settings.Ore.SILICON_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 24)
			{
				if (Settings.Ore.PHOSPHORUS_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 25)
			{
				if (Settings.Ore.SULFUR_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
			else if (meta = 26)
			{
				if (Settings.Ore.LAPIS_GEN)
				{
					list.add(new ItemStack(item, 1, meta));
				}
			}
		}
	}
	
	@Override
	public int damageDropped (int meta)
	{
		return meta;
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister iconRegister)
	{
		this.blockTop = new IIcon[Names.Blocks.ORE_POOR_STONE.length];
		this.blockSide = new IIcon[Names.Blocks.ORE_POOR_STONE.length];
		for (int i=0; i < Names.Blocks.ORE_POOR_STONE.length; i++)
		{
			blockTop[i] = iconRegister.registerIcon(String.format("%s.%s_top", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR_STONE[i]));
			blockSide[i] = iconRegister.registerIcon(String.format("%s.%s_side", getUnwrappedUnlocalizedName(this.getUnlocalizedName()), Names.Blocks.ORE_POOR_STONE[i]));
		}
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int side, int meta)
	{
		meta = MathHelper.clamp_int(meta, 0, Names.Blocks.ORE_POOR_STONE.length - 1);
		
		if (ForgeDirection.getOrientation(side) == ForgeDirection.UP || ForgeDirection.getOrientation(side) == ForgeDirection.DOWN)
		{
			return blockTop[meta];
		}
		else
		{
			return blockSide[meta];
		}
	}
}
